- name: Setup Swift Disk on Compute Nodes
  hosts: compute
  become: yes
  vars:
    ansible_env:
      USER: "onana"
  tasks:    
    - name: ensure dependencies
      apt: 
        name: 
          - curl
          - gcc   
          - memcached
          - rsync
          - sqlite3
          - xfsprogs
          - git-core
          - libffi-dev
          - python3-setuptools
          - liberasurecode-dev
          - libssl-dev
          - python3-coverage
          - python3-dev
          - python3-nose
          - python3-xattr
          - python3-eventlet
          - python3-greenlet
          - python3-pastedeploy
          - python3-netifaces
          - python3-pip
          - python3-dnspython 
          - python3-mock
        state: present
        update_cache: yes
        
    - name: Ensure ansible user group exists
      group:
        name: "{{ ansible_env.USER }}"
        state: present
        
    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ ansible_env.USER }}"
        groups: "{{ ansible_env.USER }}"
        append: true

    - name: Reset ssh connection to allow user changes to affect ansible user
      ansible.builtin.meta:
        reset_connection
        
    - name: Ensure /srv directory exists
      file:
        path: /srv
        state: directory

    - name: Create a sparse file for Swift disk
      command: sudo truncate -s 8GB /srv/swift-disk

    - name: Format the Swift disk with XFS  
      command: sudo mkfs.xfs -f /srv/swift-disk
      
    - name: Ensure fstab contains the correct mount entry for Swift disk
      lineinfile:
        path: /etc/fstab
        line: '/srv/swift-disk /mnt/sdb1 xfs loop,noatime 0 0'
        state: present
        
    - name: Create the Swift data mount point
      file:
        path: /mnt/sdb1
        state: directory
 
    - name: Mount all file systems from fstab
      command: sudo mount -a      

    - name: Create individualized data links
      file:
        path: "/mnt/sdb1/{{ item }}"
        state: directory
      loop: ["1", "2", "3", "4"]

    - name: Change ownership of /mnt/sdb1/*
      file:
        path: "/mnt/sdb1"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: yes

    - name: Create symlinks from /mnt/sdb1 to /srv
      file:
        src: "/mnt/sdb1/{{ item }}"
        dest: "/srv/{{ item }}"
        state: link
      loop: ["1", "2", "3", "4"]

    - name: Create Swift node directories
      file:
        path: "/srv/{{ item.0 }}/node/{{ item.1 }}"
        state: directory
      loop:
        - ["1", "sdb1"]
        - ["1", "sdb5"]
        - ["2", "sdb2"]
        - ["2", "sdb6"]
        - ["3", "sdb3"]
        - ["3", "sdb7"]
        - ["4", "sdb4"]
        - ["4", "sdb8"]

    - name: Create Swift run and cache directories
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /var/run/swift
        - /var/cache/swift
        - /var/cache/swift2
        - /var/cache/swift3
        - /var/cache/swift4

    - name: Change ownership of Swift directories
      file:
        path: "{{ item }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: yes
      loop:
        - /var/run/swift
        - /var/cache/swift*

    - name: Change ownership of /srv/X/
      file:
        path: "/srv/{{ item }}/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: yes
      loop: ["1", "2", "3", "4"]
      

    - name: Ensure /etc/rc.local exists and is executable
      copy:
        dest: /etc/rc.local
        content: |
          #!/bin/sh -e
          mkdir -p /var/cache/swift /var/cache/swift2 /var/cache/swift3 /var/cache/swift4
          chown {{ ansible_user }}:{{ ansible_user }} /var/cache/swift*
          mkdir -p /var/run/swift
          chown {{ ansible_user }}:{{ ansible_user }} /var/run/swift
          exit 0
        mode: 'a+x'

    - name: Ensure /srv directory exists
      file:
        path: /srv
        state: directory
 

    - name: Create a sparse file for Swift temp
      command: sudo truncate -s 1GB /srv/swift-tmp
      
    - name: Format the Swift temp with XFS
      command: sudo mkfs.xfs -f /srv/swift-tmp
      
    - name: Check if Swift temp is already mounted
      command: mountpoint -q /tmp
      register: swift_tmp_mounted
      ignore_errors: yes

    - name: Mount Swift temp manually if not mounted
      command: sudo mount -o loop,noatime /srv/swift-tmp /tmp
      when: swift_tmp_mounted.rc != 0

    - name: Set permissions for /tmp
      command: sudo chmod -R 1777 /tmp

    - name: Ensure fstab contains the correct mount entry for Swift temp
      lineinfile:
        path: /etc/fstab
        line: '/srv/swift-tmp /tmp xfs rw,noatime,attr2,inode64,noquota 0 0'
        state: present

    - name: Clone python-swiftclient repository
      become: false
      git:
        repo: https://opendev.org/openstack/python-swiftclient.git
        dest: "~/python-swiftclient"
        

    - name: Build python-swiftclient
      become: false
      command: sudo python3 setup.py develop
      args:
        chdir: "~/python-swiftclient"
        
    - name: Clone OpenStack Swift repository
      become: false
      git:
        repo: https://github.com/openstack/swift.git
        dest: "~/swift"
        
    - name: Build a development installation of Swift
      become: yes
      become_user: onana
      shell: |
        sudo -H pip install --no-binary cryptography -r requirements.txt
        sudo -H python3 setup.py develop
      args:
        chdir: "~/swift"   
        
    - name: Install Swift's test dependencies
      become: yes
      become_user: onana
      shell: |
        sudo -H pip install -r test-requirements.txt
      args:
        chdir: "~/swift"        

    - name: Create /etc/rsyncd.conf
      copy:
        src: "~/swift/doc/saio/rsyncd.conf"
        dest: /etc/rsyncd.conf

    - name: Replace <your-user-name> in rsyncd.conf
      command: sudo sed -i "s/<your-user-name>/{{ ansible_user }}/" /etc/rsyncd.conf
      

    - name: edit /etc/default/rsync
      replace:
        path: /etc/default/rsync
        regexp: "RSYNC_ENABLE=false"
        replace: "RSYNC_ENABLE=true"
        

    - name: Enable and start rsync daemon
      systemd:
        name: rsync
        enabled: yes
        state: started

    - name: Verify rsync is accepting connections
      command: sudo rsync rsync://pub@localhost/

    - name: Enable and start memcached
      systemd:
        name: memcached
        enabled: yes
        state: started

    - name: Remove /etc/swift directory
      file:
        path: /etc/swift
        state: absent
        

    - name: Copy swift directory to /etc/swift
      become: false
      command:
        cmd: sudo cp -r saio/swift /etc/swift
        chdir: "~/swift/doc"
        

    - name: Change ownership of /etc/swift
      command:
        cmd: sudo chown -R {{ ansible_user }}:{{ ansible_user }} /etc/swift

    - name: Find all .conf files in /etc/swift/ (including subdirectories)
      find:
        paths: /etc/swift/
        patterns: "*.conf"
        recurse: yes  # Ensure it searches subdirectories
      register: conf_files
    

    - name: Replace <your-user-name> with the current user
      replace:
        path: "{{ item.path }}"
        regexp: "<your-user-name>"
        replace: "{{ ansible_env.USER }}"
      loop: "{{ conf_files.files }}"
      
    - name: Ensure ~/bin directory exists
      file:
        path: ~/bin
        state: directory
      become: false


    - name: Copy ~/swift/doc/saio/bin/ to ~/bin
      become: false
      copy:
        src: ~/swift/doc/saio/bin/
        dest: ~/bin
        mode: 'a+x'
        
        
    - name: Replace /var/log/swift
      become: false
      command: sudo sed -i "/find \/var\/log\/swift/d" ~/bin/resetswift
      
 
    - name: Copy ~/swift/test/sample.conf /etc/swift/test.conf
      become: false
      copy:
        src: ~/swift/test/sample.conf
        dest: /etc/swift/test.conf
        
    - name: edit /etc/swift/test.conf
      replace:
        path: "/etc/swift/test.conf"
        regexp: "http://127.0.0.1"
        replace: "http://0.0.0.0"
 
      
    - name: Add environment variables to .bashrc
      become: false
      block:
        - lineinfile:
            path: "~/.bashrc"
            line: "export SWIFT_TEST_CONFIG_FILE=/etc/swift/test.conf"
            create: yes
        - lineinfile:
            path: "~/.bashrc"
            line: "export PATH=${PATH}:~/bin"
            create: yes
        - lineinfile:
            path: "~/.bashrc"
            line: "export SAIO_BLOCK_DEVICE=/srv/swift-disk"
            create: yes
            
    - name: Source .bashrc
      become: false
      shell: "source ~/.bashrc"
      args:
        executable: /bin/bash     

    - name:  remake rings and start main
      become: false
      shell: |
        ~/bin/remakerings
        ~/bin/startmain
        
